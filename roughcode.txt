// import { useEffect, useRef, useState } from "react";
// import { useNavigate } from "react-router-dom"; // âœ… For navigation

// export default function InterviewPanel() {
//   const navigate = useNavigate();
//   const [messages, setMessages] = useState([
//     { sender: "ai", text: "Could you specify the type of files and the information you require in the summary?" },
//     { sender: "me", text: "I need to understand the data. Please analyze the overall sales performance." },
//     { sender: "me", text: "I'm thinking about spreadsheets. What should I be asking?" },
//     { sender: "ai", text: "For spreadsheets, consider asking:\n- How can I compare data across multiple sheets?\n- Can I detect discrepancies between versions?\n- What's the best method to visualize data differences?" }
//   ]);
//   const [input, setInput] = useState("");
//   const [timeLeft, setTimeLeft] = useState(60 * 5); // 5 minutes
//   const [listening, setListening] = useState(false);
//   const recognitionRef = useRef(null);
//   const userVideoRef = useRef(null);

//   // Camera Access
//   useEffect(() => {
//     navigator.mediaDevices
//       .getUserMedia({ video: true, audio: false })
//       .then((stream) => {
//         if (userVideoRef.current) {
//           userVideoRef.current.srcObject = stream;
//         }
//       })
//       .catch(() => {
//         alert("Please allow camera access.");
//       });
//   }, []);

//   // Countdown Timer
//   useEffect(() => {
//     const timer = setInterval(() => {
//       setTimeLeft((prev) => (prev > 0 ? prev - 1 : 0));
//     }, 1000);
//     return () => clearInterval(timer);
//   }, []);

//   const formatTime = (seconds) => {
//     const h = String(Math.floor(seconds / 3600)).padStart(2, "0");
//     const m = String(Math.floor((seconds % 3600) / 60)).padStart(2, "0");
//     const s = String(seconds % 60).padStart(2, "0");
//     return { h, m, s };
//   };

//   const { h, m, s } = formatTime(timeLeft);

//   const sendMessage = () => {
//     if (input.trim()) {
//       setMessages([...messages, { sender: "me", text: input }]);
//       setInput("");
//     }
//   };

//   // Speech-to-Text
//   const startListening = () => {
//     if (!("webkitSpeechRecognition" in window)) {
//       alert("Speech recognition not supported in this browser.");
//       return;
//     }

//     if (!recognitionRef.current) {
//       const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
//       recognitionRef.current = new SpeechRecognition();
//       recognitionRef.current.lang = "en-US";
//       recognitionRef.current.interimResults = true;
//       recognitionRef.current.continuous = false;

//       recognitionRef.current.onresult = (event) => {
//         const transcript = Array.from(event.results)
//           .map((result) => result[0].transcript)
//           .join("");
//         setInput(transcript);
//       };

//       recognitionRef.current.onend = () => {
//         setListening(false);
//       };
//     }

//     if (!listening) {
//       setListening(true);
//       recognitionRef.current.start();
//     } else {
//       recognitionRef.current.stop();
//       setListening(false);
//     }
//   };

//   // Leave Interview
//   const handleLeave = () => {
//     const score = Math.floor(Math.random() * 100); // âœ… Random score for demo
//     navigate("/interimResult", { state: { score } }); // âœ… Pass score to ScoreCard
//   };

//   return (
//     <div className="min-h-screen bg-gray-100 p-4 flex flex-col md:flex-row gap-4">
//       {/* Chat Section */}
//       <div className="flex-1 bg-white rounded-xl shadow-lg flex flex-col">
//         <div className="flex-1 p-4 overflow-y-auto space-y-4">
//           {messages.map((msg, index) => (
//             <div
//               key={index}
//               className={`max-w-xs p-3 rounded-lg ${
//                 msg.sender === "me"
//                   ? "ml-auto bg-blue-500 text-white"
//                   : "bg-gray-200 text-gray-900"
//               }`}
//             >
//               {msg.text.split("\n").map((line, i) => (
//                 <p key={i}>{line}</p>
//               ))}
//             </div>
//           ))}
//         </div>

//         {/* Input */}
//         <div className="p-3 border-t flex gap-2 items-center">
//           <input
//             type="text"
//             placeholder="Write your message or use mic..."
//             value={input}
//             onChange={(e) => setInput(e.target.value)}
//             className="flex-1 text-gray-600 border rounded-lg p-2 focus:outline-none"
//           />
//           <button
//             onClick={startListening}
//             className={`px-3 py-2 rounded-full ${
//               listening ? "bg-red-500 text-white" : "bg-gray-300"
//             }`}
//             title="Click to speak"
//           >
//             ðŸŽ¤
//           </button>
//           <button
//             onClick={sendMessage}
//             className="bg-green-500 text-white px-4 rounded-lg hover:bg-green-600"
//           >
//             Send
//           </button>
//         </div>
//       </div>

//       {/* Right Panel */}
//       <div className="w-full md:w-1/3 bg-white rounded-xl shadow-lg p-4 flex flex-col items-center gap-4">
//         <div className="text-lg font-bold">
//           Left time:{" "}
//           <span className="ml-2 text-blue-600">
//             {h}:{m}:{s}
//           </span>
//         </div>

//         <div className="flex flex-col gap-3 w-full">
//           <video
//             ref={userVideoRef}
//             autoPlay
//             playsInline
//             muted
//             className="w-full h-40 object-cover rounded-lg border"
//           />
//           <video
//             src="https://www.w3schools.com/html/mov_bbb.mp4"
//             autoPlay
//             muted
//             loop
//             playsInline
//             className="w-full h-40 object-cover rounded-lg border"
//           />
//         </div>

//         <button
//           onClick={handleLeave}
//           className="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 mt-auto"
//         >
//           Leave
//         </button>
//       </div>
//     </div>
//   );
// }














            {/* <div className="bg-[#151a23]/90 border border-blue-900 rounded-2xl px-8 py-18 shadow-xl shadow-blue-700/20 flex flex-col items-center text-center md:min-w-[320px] min-w-0 hover:scale-105 hover:shadow-blue-400/40 transition-all duration-300 relative">
              <div className="absolute -top-10 left-1/2 -translate-x-1/2 md:static md:top-0 md:left-0 md:translate-x-0 mb-3">
                {step.icon}
              </div>
              <h3 className="text-lg md:text-xl font-bold mb-3">{step.title}</h3>
              <p className="text-gray-300 text-base">{step.description}</p>
            </div> */}

                    {/* <div className="relative bg-[#151a23]/90 border border-blue-900 rounded-2xl px-8 pt-14 pb-10 shadow-xl shadow-blue-700/20 flex flex-col items-center text-center md:min-w-[320px] min-w-0 hover:scale-105 hover:shadow-blue-400/40 transition-all duration-300 overflow-visible">
  
  <div className="mb-3 md:mb-0 md:absolute md:-top-8 md:left-1/2 md:-translate-x-1/2">
    <div className="w-12 h-12 md:w-14 md:h-14 flex items-center justify-center bg-[#141822] rounded-full shadow-lg">
      {step.icon}
    </div>
  </div>

  <h3 className="text-lg md:text-xl font-bold mb-3">{step.title}</h3>
  <p className="text-gray-300 text-base">{step.description}</p>
</div> */}












